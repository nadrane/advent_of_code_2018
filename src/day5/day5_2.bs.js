// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Char = require("bs-platform/lib/js/char.js");
var Path = require("path");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

var inputFilePath = Path.join(__dirname, "./input.txt");

function readFile(param) {
  return Fs.readFileSync(inputFilePath, "utf8");
}

function compareChars(a, b) {
  var match = a < 91;
  var match$1 = b < 91;
  if (match) {
    if (match$1) {
      return false;
    } else {
      return (a + 32 | 0) === b;
    }
  } else if (match$1) {
    return a === (32 + b | 0);
  } else {
    return false;
  }
}

function minimize(line) {
  var _minimizedLine = line;
  var _idx = 0;
  while(true) {
    var idx = _idx;
    var minimizedLine = _minimizedLine;
    var match = minimizedLine.length === 0;
    if (match) {
      return "";
    } else {
      var match$1 = (minimizedLine.length - 1 | 0) === idx;
      if (match$1) {
        return minimizedLine;
      } else {
        var match$2 = compareChars(Caml_string.get(minimizedLine, idx), Caml_string.get(minimizedLine, idx + 1 | 0));
        if (match$2) {
          _idx = 0;
          _minimizedLine = minimizedLine.slice(0, idx) + minimizedLine.slice(idx + 2 | 0);
          continue ;
        } else {
          _idx = idx + 1 | 0;
          continue ;
        }
      }
    }
  };
}

function removeChar(line, $$char) {
  var upper = $$String.uppercase($$String.make(1, $$char));
  var lower = $$String.lowercase($$String.make(1, $$char));
  var _idx = 0;
  var _newString = "";
  while(true) {
    var newString = _newString;
    var idx = _idx;
    var match = line.length === idx;
    if (match) {
      return newString;
    } else {
      var maybeRemove = $$String.make(1, Caml_string.get(line, idx));
      var match$1 = maybeRemove === upper || maybeRemove === lower;
      if (match$1) {
        _idx = idx + 1 | 0;
        continue ;
      } else {
        _newString = maybeRemove + newString;
        _idx = idx + 1 | 0;
        continue ;
      }
    }
  };
}

var originalLine = Fs.readFileSync(inputFilePath, "utf8");

var polymerLengthByLetter = { };

for(var offset = 0; offset <= 25; ++offset){
  var testChar = Char.chr(/* "A" */65 + offset | 0);
  polymerLengthByLetter[$$String.make(1, testChar)] = minimize(removeChar(originalLine, testChar)).length;
}

console.log(polymerLengthByLetter);

exports.inputFilePath = inputFilePath;
exports.readFile = readFile;
exports.compareChars = compareChars;
exports.minimize = minimize;
exports.removeChar = removeChar;
exports.originalLine = originalLine;
exports.polymerLengthByLetter = polymerLengthByLetter;
/* inputFilePath Not a pure module */
