// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var inputFilePath = Path.join(__dirname, "./input.txt");

function readFile(param) {
  return Fs.readFileSync(inputFilePath, "utf8").split("\n");
}

function countContributions(line) {
  return $$Array.fold_left((function (letterOccurrences, letter) {
                var match = letterOccurrences[letter];
                if (match !== undefined) {
                  letterOccurrences[letter] = match + 1 | 0;
                  return letterOccurrences;
                } else {
                  letterOccurrences[letter] = 1;
                  return letterOccurrences;
                }
              }), { }, line.split(""));
}

function findContriubtions(letterCounts) {
  return $$Array.fold_left((function (contributions, count) {
                var threes = contributions[1];
                var twos = contributions[0];
                if (count !== 2) {
                  if (count !== 3) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "day2_1.re",
                            34,
                            16
                          ]
                        ];
                  } else {
                    return /* tuple */[
                            twos,
                            Caml_primitive.caml_int_min(threes + 1 | 0, 1)
                          ];
                  }
                } else {
                  return /* tuple */[
                          Caml_primitive.caml_int_min(twos + 1 | 0, 1),
                          threes
                        ];
                }
              }), /* tuple */[
              0,
              0
            ], Js_dict.entries(letterCounts).filter((function (pair) {
                      if (pair[1] === 2) {
                        return true;
                      } else {
                        return pair[1] === 3;
                      }
                    })).map((function (param) {
                    return param[1];
                  })));
}

function sumContributions(contributions) {
  return $$Array.fold_left((function (param, param$1) {
                return /* tuple */[
                        param[0] + param$1[0] | 0,
                        param[1] + param$1[1] | 0
                      ];
              }), /* tuple */[
              0,
              0
            ], contributions);
}

function multiplyContributions(param) {
  return Caml_int32.imul(param[0], param[1]);
}

console.log(multiplyContributions(sumContributions($$Array.map(findContriubtions, $$Array.map(countContributions, Fs.readFileSync(inputFilePath, "utf8").split("\n"))))));

exports.inputFilePath = inputFilePath;
exports.readFile = readFile;
exports.countContributions = countContributions;
exports.findContriubtions = findContriubtions;
exports.sumContributions = sumContributions;
exports.multiplyContributions = multiplyContributions;
/* inputFilePath Not a pure module */
