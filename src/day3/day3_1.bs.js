// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var inputFilePath = Path.join(__dirname, "./input.txt");

function readFile(param) {
  return Fs.readFileSync(inputFilePath, "utf8").split("\n");
}

function parseClaim(line) {
  var id = Caml_format.caml_int_of_string(Caml_array.caml_array_get(line.split("@"), 0).trim().slice(1));
  var otherHalf = Caml_array.caml_array_get(line.split("@"), 1).trim().split(": ");
  var position = Caml_array.caml_array_get(otherHalf, 0);
  var dimensions = Caml_array.caml_array_get(otherHalf, 1);
  return /* record */[
          /* id */id,
          /* row */Caml_format.caml_int_of_string(Caml_array.caml_array_get(position.split(","), 1)),
          /* col */Caml_format.caml_int_of_string(Caml_array.caml_array_get(position.split(","), 0)),
          /* width */Caml_format.caml_int_of_string(Caml_array.caml_array_get(dimensions.split("x"), 0)),
          /* height */Caml_format.caml_int_of_string(Caml_array.caml_array_get(dimensions.split("x"), 1))
        ];
}

var grid = $$Array.make_matrix(1000, 1000, 0);

function getCoordsOfClaim(claim) {
  var coords = /* [] */0;
  for(var row = claim[/* row */1] ,row_finish = (claim[/* row */1] + claim[/* height */4] | 0) - 1 | 0; row <= row_finish; ++row){
    for(var col = claim[/* col */2] ,col_finish = (claim[/* col */2] + claim[/* width */3] | 0) - 1 | 0; col <= col_finish; ++col){
      coords = /* :: */[
        /* tuple */[
          row,
          col
        ],
        coords
      ];
    }
  }
  return coords;
}

var duplicateCount = /* record */[/* contents */0];

function applyCoordToGrid(param) {
  var col = param[1];
  var row = param[0];
  var match = Caml_array.caml_array_get(Caml_array.caml_array_get(grid, row), col);
  if (match !== 0) {
    if (match !== 1) {
      return /* () */0;
    } else {
      Caml_array.caml_array_set(Caml_array.caml_array_get(grid, row), col, 2);
      duplicateCount[0] = duplicateCount[0] + 1 | 0;
      return /* () */0;
    }
  } else {
    return Caml_array.caml_array_set(Caml_array.caml_array_get(grid, row), col, 1);
  }
}

function line(param) {
  return /* array */["#123 @ 1,2: 3x1"];
}

List.map((function (param) {
        return List.map(applyCoordToGrid, param);
      }), $$Array.to_list($$Array.map(getCoordsOfClaim, $$Array.map(parseClaim, Fs.readFileSync(inputFilePath, "utf8").split("\n")))));

console.log(duplicateCount);

var width = 1000;

var height = 1000;

exports.inputFilePath = inputFilePath;
exports.readFile = readFile;
exports.parseClaim = parseClaim;
exports.width = width;
exports.height = height;
exports.grid = grid;
exports.getCoordsOfClaim = getCoordsOfClaim;
exports.duplicateCount = duplicateCount;
exports.applyCoordToGrid = applyCoordToGrid;
exports.line = line;
/* inputFilePath Not a pure module */
