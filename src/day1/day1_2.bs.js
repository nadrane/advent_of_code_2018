// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var inputFilePath = Path.join(__dirname, "./input.txt");

var data = Fs.readFileSync(inputFilePath, "utf8");

function dataToInts(data) {
  return data.split("\n").map((function (line) {
                var match = line.startsWith("-");
                if (match) {
                  return Caml_int32.imul(-1, Caml_format.caml_int_of_string(line.slice(1)));
                } else {
                  return Caml_format.caml_int_of_string(line.slice(1));
                }
              }));
}

function getFirstRepeatedFrequency(originalDataPoints) {
  var toDataList = function (data) {
    return List.map((function (prim) {
                  return String(prim);
                }), $$Array.to_list(data));
  };
  var frequencyCounts = { };
  var _currentFrequency = 0;
  var _dataPoints = toDataList(originalDataPoints);
  while(true) {
    var dataPoints = _dataPoints;
    var currentFrequency = _currentFrequency;
    if (List.length(dataPoints) === 0) {
      _dataPoints = toDataList(originalDataPoints);
      continue ;
    } else {
      var key = String(currentFrequency);
      var match = frequencyCounts[key];
      if (match !== undefined) {
        return currentFrequency;
      } else {
        frequencyCounts[key] = true;
        _dataPoints = List.tl(dataPoints);
        _currentFrequency = Caml_format.caml_int_of_string(List.hd(dataPoints)) + currentFrequency | 0;
        continue ;
      }
    }
  };
}

console.log(getFirstRepeatedFrequency(dataToInts(data)));

exports.inputFilePath = inputFilePath;
exports.data = data;
exports.dataToInts = dataToInts;
exports.getFirstRepeatedFrequency = getFirstRepeatedFrequency;
/* inputFilePath Not a pure module */
